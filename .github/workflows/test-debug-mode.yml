name: Test Weather Notifier Debug Mode

on:
  # Allow manual trigger from GitHub
  workflow_dispatch:
    inputs:
      debug:
        description: 'Run in debug mode'
        required: false
        default: 'true'
  
  # You can keep these triggers or remove them if you only want manual execution
  push:
    branches:
      - main
    paths:
      - 'scripts/weather-notifier.js'
  pull_request:
    branches:
      - main
    paths:
      - 'scripts/weather-notifier.js'

jobs:
  test-debug-mode:
    name: Test Weather Notifier in Debug Mode
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install openai firebase-admin dotenv
      
      - name: Find weather notifier script
        id: find-script
        run: |
          echo "Looking for weather-notifier.js in repository..."
          # Use the GitHub workspace environment variable to search from the root
          SCRIPT_PATH=$(find $GITHUB_WORKSPACE -type f -name "weather-notifier.js" | head -n 1)
          
          if [ -z "$SCRIPT_PATH" ]; then
            echo "Error: weather-notifier.js not found in repository"
            echo "Listing potential directories for debugging:"
            ls -la $GITHUB_WORKSPACE/scripts/ || echo "scripts directory not found"
            ls -la $GITHUB_WORKSPACE/.github/scripts/ || echo ".github/scripts directory not found"
            exit 1
          fi
          
          echo "Found script at: $SCRIPT_PATH"
          echo "Verifying file exists and is readable:"
          ls -la "$SCRIPT_PATH"
          
          # Set the output variable with the full path
          echo "script_path=$SCRIPT_PATH" >> $GITHUB_OUTPUT
      
      - name: Run weather notifier in debug mode
        env:
          FIREBASE_TYPE: ${{ secrets.FIREBASE_TYPE }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
          FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
          FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}
          FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
          FIREBASE_UNIVERSE_DOMAIN: ${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DEBUG_MODE: 'true'  # Force debug mode to be true
        run: |
          # Create a temporary directory with package.json
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # Initialize a new Node.js project and install dependencies
          npm init -y
          npm install firebase-admin openai dotenv
          
          # Get the script path from the output variable
          SCRIPT_PATH="${{ steps.find-script.outputs.script_path }}"
          
          echo "Using script at path: $SCRIPT_PATH"
          echo "Verifying file exists:"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "Error: File not found at $SCRIPT_PATH"
            exit 1
          fi
          
          # Create a Firebase service account JSON file
          echo "Creating Firebase service account file..."
          cat > ./firebase-service-account.json << EOF
          {
            "type": "$FIREBASE_TYPE",
            "project_id": "$FIREBASE_PROJECT_ID",
            "private_key_id": "$FIREBASE_PRIVATE_KEY_ID",
            "private_key": "$FIREBASE_PRIVATE_KEY",
            "client_email": "$FIREBASE_CLIENT_EMAIL",
            "client_id": "$FIREBASE_CLIENT_ID",
            "auth_uri": "$FIREBASE_AUTH_URI",
            "token_uri": "$FIREBASE_TOKEN_URI",
            "auth_provider_x509_cert_url": "$FIREBASE_AUTH_PROVIDER_X509_CERT_URL",
            "client_x509_cert_url": "$FIREBASE_CLIENT_X509_CERT_URL",
            "universe_domain": "$FIREBASE_UNIVERSE_DOMAIN"
          }
          EOF
          
          # Create a .env file
          echo "Creating .env file..."
          cat > ./.env << EOF
          FIREBASE_SERVICE_ACCOUNT_PATH=./firebase-service-account.json
          OPENAI_API_KEY=$OPENAI_API_KEY
          DEBUG_MODE=true
          EOF
          
          echo "Converting from ES modules to CommonJS and updating Firebase initialization..."
          # Copy the script to the temporary directory with modified initialization
          cat "$SCRIPT_PATH" | 
          sed "s/import \* as admin from 'firebase-admin';/const admin = require('firebase-admin');/g" | 
          sed "s/import { OpenAI } from 'openai';/const { OpenAI } = require('openai');/g" | 
          sed "s/import dotenv from 'dotenv';/const dotenv = require('dotenv');/g" |
          sed "s/admin.initializeApp({/admin.initializeApp({credential: admin.credential.cert(JSON.parse(require('fs').readFileSync(process.env.FIREBASE_SERVICE_ACCOUNT_PATH, 'utf8'))),/g" |
          sed '/credential: admin.credential.cert({/,/}),/d' > weather-notifier.js
          
          echo "Running modified script in temporary directory with debug mode..."
          echo "===================== DEBUG MODE OUTPUT ====================="
          # Run with increased verbosity for debugging
          node weather-notifier.js
          RESULT=$?
          echo "===================== END OF OUTPUT ====================="
          echo "Script exited with code: $RESULT"
          
          # If the script runs successfully, summarize what would happen in production
          if [ $RESULT -eq 0 ]; then
            echo ""
            echo "✅ Debug test completed successfully."
            echo "In production mode, the script would:"
            echo "- Actually send email notifications instead of just logging them"
            echo "- Record notifications in the Firebase database"
            echo "- Exit with code 0 on success"
          else
            echo ""
            echo "❌ Debug test failed with exit code $RESULT"
            echo "Check the logs above for more details."
          fi
      
      - name: Report results
        if: always()
        run: |
          echo "Weather notifier debug test completed at $(date)"
          echo "See logs for details"